Ievads
JavaScript ir dinamiska valoda, kas atbalsta objektorientētus, imperatīvus un deklaratīvus (piemēram, funkcionālās programmēšanas) stilus.

(Atkārtota) Piešķiršana
Ir daži galvenie veidi, kā JavaScript nosaukumiem piešķirt vērtības — izmantojot mainīgos vai konstantes. Uz Exercism mainīgie vienmēr tiek rakstīti camelCase ; konstantes tiek rakstītas SCREAMING_SNAKE_CASE . Nav oficiāla ceļveža, kas jāievēro, un dažādiem uzņēmumiem un organizācijām ir dažādi stila ceļveži. Jūtieties brīvi rakstīt mainīgos, kā vēlaties . To rakstīšanas veids, kā tiek sagatavoti vingrinājumi, ir tas, ka tīmekļa saskarnē un lielākajā daļā IDE tie tiks izcelti atšķirīgi.

JavaScript mainīgos var definēt, izmantojot constatslēgvārdu letvai var.

Mainīgais var atsaukties uz dažādām vērtībām tā darbības laikā, izmantojot letvai var. Piemēram, myFirstVariablevar definēt un atkārtoti definēt daudzas reizes, izmantojot piešķiršanas operatoru =:

let myFirstVariable = 1;
myFirstVariable = 'Some string';
myFirstVariable = new SomeComplexClass();
Atšķirībā no letun var, mainīgos, kas ir definēti ar, constvar piešķirt tikai vienu reizi. To izmanto, lai definētu konstantes JavaScript.

const MY_FIRST_CONSTANT = 10;

// Can not be re-assigned.
MY_FIRST_CONSTANT = 20;
// => TypeError: Assignment to constant variable.
💡 Vēlākā koncepcijas uzdevumā ir izpētīta un izskaidrota atšķirība starp konstantu piešķiršanu/saistīšanu un nemainīgo vērtību.

Funkciju deklarācijas
Programmā JavaScript funkcionalitātes vienības ir iekapsulētas funkcijās , parasti funkcijas tiek grupētas vienā failā, ja tās ir kopā. Šīs funkcijas var ņemt parametrus (argumentus) un var atgriezt vērtību, izmantojot returnatslēgvārdu. Funkcijas tiek izsauktas, izmantojot ()sintaksi.

function add(num1, num2) {
  return num1 + num2;
}

add(1, 3);
// => 4
💡 JavaScript ir daudz dažādu veidu, kā deklarēt funkciju. Šie citi veidi izskatās savādāk nekā functionatslēgvārda izmantošana. Trasē mēģināts tos pamazām ieviest, bet, ja jau zini par tiem, droši izmanto kādu no tiem. Vairumā gadījumu viena vai otra izmantošana nav labāka vai sliktāka.

Pakļaušana citiem failiem
Lai function, konstante vai mainīgais būtu pieejams citos failos , tie ir jāeksportē , izmantojot exportatslēgvārdu. Pēc tam tos var importēt cits fails , izmantojot importatslēgvārdu. To sauc arī par moduļu sistēmu. Lielisks piemērs ir tas, kā darbojas visi testi. Katram uzdevumam ir vismaz viens fails, piemēram lasagna.js, kurā ir implementācija . Turklāt ir vēl vismaz viens fails, piemēram lasagna.spec.js, kurā ir ietverti testi . Šis fails importē publiskās (ti, eksportētās) entītijas, lai pārbaudītu ieviešanu:

// file.js
export const MY_VALUE = 10;

export function add(num1, num2) {
  return num1 + num2;
}

// file.spec.js
import { MY_VALUE, add } from './file';

add(MY_VALUE, 5);
// => 15



Instructions
Lucian's girlfriend is on her way home, and he hasn't cooked their anniversary dinner!

In this exercise, you're going to write some code to help Lucian cook an exquisite lasagna from his favorite cookbook.

You have four tasks related to the time spent cooking the lasagna.

1. Define the expected oven time in minutes
Define the EXPECTED_MINUTES_IN_OVEN constant that represents how many minutes the lasagna should be in the oven. It must be exported. According to the cooking book, the expected oven time in minutes is 40.

2. Calculate the remaining oven time in minutes
Implement the remainingMinutesInOven function that takes the actual minutes the lasagna has been in the oven as a parameter and returns how many minutes the lasagna still has to remain in the oven, based on the expected oven time in minutes from the previous task.

remainingMinutesInOven(30);
// => 10
3. Calculate the preparation time in minutes
Implement the preparationTimeInMinutes function that takes the number of layers you added to the lasagna as a parameter and returns how many minutes you spent preparing the lasagna, assuming each layer takes you 2 minutes to prepare.

preparationTimeInMinutes(2);
// => 4
4. Calculate the total working time in minutes
Implement the totalTimeInMinutes function that takes two parameters: the numberOfLayers parameter is the number of layers you added to the lasagna, and the actualMinutesInOven parameter is the number of minutes the lasagna has been in the oven. The function should return how many minutes in total you've worked on cooking the lasagna, which is the sum of the preparation time in minutes, and the time in minutes the lasagna has spent in the oven at the moment.

totalTimeInMinutes(3, 20);
// => 26



expect(EXPECTED_MINUTES_IN_OVEN).toBe(40);

expect(remainingMinutesInOven(25)).toBe(15);
expect(remainingMinutesInOven(5)).toBe(35);
expect(remainingMinutesInOven(39)).toBe(1);
expect(remainingMinutesInOven(40)).toBe(0);
expect(remainingMinutesInOven(0)).toBe(40);

expect(preparationTimeInMinutes(1)).toBe(2);
expect(preparationTimeInMinutes(2)).toBe(4);
expect(preparationTimeInMinutes(8)).toBe(16);

expect(totalTimeInMinutes(1, 5)).toBe(7);
expect(totalTimeInMinutes(4, 15)).toBe(23);
expect(totalTimeInMinutes(1, 35)).toBe(37);